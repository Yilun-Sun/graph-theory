{"version":3,"sources":["Sorting/BubbleSort.js","Sorting/InsertionSort.js","Sorting/SelectionSort.js","Canvas/Canvas.js","Canvas/CanvasGraph.js","Visualgo/Visualgo.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["BubbleSort","array","this","i","j","result","isEnd","prototype","next","len","length","temp","push","InsertionSort","preIndex","current","SelectionSort","minIndex","filledRect","props","ctx","x","y","width","height","color","fillStyle","fillRect","drawBars","drawBackground","document","getElementById","getContext","barNums","barWidth","maxInArray","Number","MIN_VALUE","forEach","element","Math","max","clearRect","nextStep","selectionSort","drawSelectionBars","clearInterval","timer","console","log","React","Component","drawFilledCircle","radius","save","beginPath","arc","PI","stroke","fill","strokeStyle","drawGraph","graph","vertexNums","rds","cos","sin","lineWidth","cliqueNode","temp_x1","temp_y1","temp_x2","temp_y2","moveTo","lineTo","temp_x","temp_y","includes","font","fillText","setCMDTextArea","text","value","getCMDTextArea","textArray","substring","split","temp_graph","temp_subtext","temp_arr","temp_subarr","index","parseInt","sort","a","b","checktCMDTextArea","m","hasNode","n","canvasElementOffsetLeft","canvasElementOffsetTop","prevX","prevY","startNodeIndex","endNodeIndex","findMaximumClique","openList","bound","calculationTimes","pop","match","canIncludeCurrentNode","nodeResult","updateNode","findMaxClique","getNodeIndex","CanvasGraph","handleMouseDown","event","isMouseDown","canvasElement","offsetLeft","offsetTop","pageX","pageY","handleMouseUp","isAdd","splice","indexOf","addOrRemoveEdge","handleMouseMove","canvasWidth","canvasHeight","refs","canvas","state","updateCanvas","Fragment","id","ref","onMouseUp","onMouseDown","onMouseMove","style","fontSize","Header","Layout","Content","Footer","Sider","SubMenu","Menu","Visualgo","collapsed","onCollapse","setState","minHeight","collapsible","src","logo","alt","theme","defaultSelectedKeys","mode","Item","key","title","onClick","className","lineHeight","margin","textAlign","App","Boolean","window","location","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.b2bbd068.chunk.js","sourcesContent":["function BubbleSort(array) {\r\n    // this.index = {\r\n    //     'left': left,\r\n    //     'right': right\r\n    // };\r\n    this.array = array;\r\n    this.i = 0;\r\n    this.j = 0;\r\n}\r\n\r\nlet result = [];\r\nlet isEnd = false;\r\n\r\nBubbleSort.prototype.next = function () {\r\n    var len = this.array.length;\r\n    result = [];\r\n    if (this.i < len - 1) {\r\n        if (this.j < len - 1 - this.i) {\r\n            if (this.array[this.j] > this.array[this.j + 1]) {        // 相邻元素两两对比\r\n                var temp = this.array[this.j + 1];        // 元素交换\r\n                this.array[this.j + 1] = this.array[this.j];\r\n                this.array[this.j] = temp;\r\n            }\r\n            this.j++;\r\n        }\r\n        else if (this.j === len - 1 - this.i) {\r\n            this.i++;\r\n            this.j = 0;\r\n        }\r\n    }\r\n    if (this.i === len - 1 && this.j === len - 1 - this.i)\r\n        isEnd = true;\r\n\r\n    result.push(this.array);\r\n    result.push(this.j);\r\n    result.push(isEnd);\r\n    return result;\r\n}\r\n\r\n\r\nexport default BubbleSort;","\r\n// var len = arr.length;\r\n// var preIndex, current;\r\n// for (var i = 1; i < len; i++) {\r\n//     preIndex = i - 1;\r\n//     current = arr[i];\r\n//     while(preIndex >= 0 && arr[preIndex] > current) {\r\n//         arr[preIndex+1] = arr[preIndex];\r\n//         preIndex--;\r\n//     }\r\n//     arr[preIndex+1] = current;\r\n// }\r\n// return arr;\r\n\r\n\r\nfunction InsertionSort(array) {\r\n    // this.index = {\r\n    //     'left': left,\r\n    //     'right': right\r\n    // };\r\n    this.array = array;\r\n    this.i = 1;\r\n    this.preIndex = this.i - 1;\r\n    this.current = this.array[this.i];\r\n}\r\n\r\nlet result = [];\r\nlet isEnd = false;\r\n\r\n\r\nInsertionSort.prototype.next = function () {\r\n    var len = this.array.length;\r\n    result = [];\r\n\r\n    if (this.i < len) {\r\n        \r\n        if (this.preIndex >= 0 && this.array[this.preIndex] > this.current) {\r\n            this.array[this.preIndex + 1] = this.array[this.preIndex];\r\n            this.preIndex--;\r\n        }\r\n        else {\r\n            this.array[this.preIndex + 1] = this.current;\r\n            this.i++;\r\n            this.preIndex = this.i - 1;\r\n            this.current = this.array[this.i];\r\n        }\r\n\r\n    }\r\n    if (this.i === len - 1 && this.preIndex === -1)\r\n        isEnd = true;\r\n\r\n    result.push(this.array);\r\n    result.push(this.preIndex + 1);\r\n    result.push(isEnd);\r\n    return result;\r\n}\r\n\r\n\r\nexport default InsertionSort;","function SelectionSort(array) {\r\n    // this.index = {\r\n    //     'left': left,\r\n    //     'right': right\r\n    // };\r\n    this.array = array;\r\n    this.i = 0;\r\n    this.j = 1;\r\n    this.minIndex = 0;\r\n}\r\n\r\nlet result = [];\r\nlet isEnd = false;\r\n\r\nSelectionSort.prototype.next = function () {\r\n    var len = this.array.length;\r\n    result = [];\r\n    if (this.i < len - 1) {\r\n        if (this.j < len) {\r\n            if (this.array[this.j] < this.array[this.minIndex]) {     // 寻找最小的数\r\n                this.minIndex = this.j;                 // 将最小数的索引保存\r\n            }\r\n            this.j++;\r\n        }\r\n        else {\r\n            let temp = this.array[this.i];\r\n            this.array[this.i] = this.array[this.minIndex];\r\n            this.array[this.minIndex] = temp;\r\n            this.i++;\r\n            this.minIndex = this.i;\r\n            this.j = this.i + 1;\r\n        }\r\n    }\r\n    if (this.i === len - 2 && this.j === len - 1)\r\n        isEnd = true;\r\n\r\n    result.push(this.array);\r\n    result.push(this.isEnd);\r\n    result.push(this.minIndex);\r\n    result.push(this.j);\r\n    return result;\r\n}\r\n\r\nexport default SelectionSort;","import React from 'react';\r\nimport BubbleSort from '../Sorting/BubbleSort'; //引入js文件\r\nimport InsertionSort from '../Sorting/InsertionSort'; //引入js文件\r\nimport SelectionSort from '../Sorting/SelectionSort'; //引入js文件\r\n\r\nimport styles from '../CSS/Button.module.css';\r\n\r\n// function outlinedRect(props) {\r\n//     const { ctx, x, y, width, height } = props;\r\n//     ctx.rect(x, y, width, height);\r\n//     ctx.stroke();\r\n// }\r\n\r\n\r\n\r\n// function filledCircle(props) {\r\n//     const { ctx, x, y, radius, color } = props;\r\n//     ctx.beginPath();\r\n//     ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\r\n//     ctx.fillStyle = color;\r\n//     ctx.fill();\r\n//     ctx.stroke();\r\n//     ctx.closePath();\r\n// }\r\n\r\nfunction filledRect(props) {\r\n    const { ctx, x, y, width, height, color } = props;\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(x, y, width, height);\r\n}\r\n\r\nfunction drawBars() {\r\n    drawBackground();\r\n    const ctx = document.getElementById(\"canvas\").getContext('2d');\r\n    barNums = array.length;\r\n    barWidth = (width - 200) / (2 * array.length - 1);\r\n    // 归一化？\r\n    let maxInArray = Number.MIN_VALUE;\r\n    array.forEach(element => {\r\n        maxInArray = Math.max(element, maxInArray);\r\n    });\r\n\r\n    for (let i = 0; i < barNums; i++) {\r\n        filledRect({ ctx: ctx, x: (100 + i * barWidth * 2), y: 500, width: barWidth, height: - array[i] * (400 / maxInArray), color: \"#2B5F75\" });\r\n    }\r\n}\r\n\r\nfunction drawBubbleBars(currentLeft) {\r\n    drawBackground();\r\n    const ctx = document.getElementById(\"canvas\").getContext('2d');\r\n    barNums = array.length;\r\n    barWidth = (width - 200) / (2 * array.length - 1);\r\n    // 归一化？\r\n    let maxInArray = Number.MIN_VALUE;\r\n    array.forEach(element => {\r\n        maxInArray = Math.max(element, maxInArray);\r\n    });\r\n\r\n    for (let i = 0; i < barNums; i++) {\r\n        if (i === currentLeft) {\r\n            filledRect({ ctx: ctx, x: (100 + i * barWidth * 2), y: 500, width: barWidth, height: - array[i] * (400 / maxInArray), color: \"#FBE251\" });\r\n        }\r\n        else {\r\n            filledRect({ ctx: ctx, x: (100 + i * barWidth * 2), y: 500, width: barWidth, height: - array[i] * (400 / maxInArray), color: \"#2B5F75\" });\r\n        }\r\n    }\r\n}\r\n\r\nfunction drawInsertionBars(currentLeft) {\r\n    drawBackground();\r\n    const ctx = document.getElementById(\"canvas\").getContext('2d');\r\n    barNums = array.length;\r\n    barWidth = (width - 200) / (2 * array.length - 1);\r\n    // 归一化？\r\n    let maxInArray = Number.MIN_VALUE;\r\n    array.forEach(element => {\r\n        maxInArray = Math.max(element, maxInArray);\r\n    });\r\n\r\n    for (let i = 0; i < barNums; i++) {\r\n        if (i === currentLeft) {\r\n            filledRect({ ctx: ctx, x: (100 + i * barWidth * 2), y: 500, width: barWidth, height: - array[i] * (400 / maxInArray), color: \"#FBE251\" });\r\n        }\r\n        else {\r\n            filledRect({ ctx: ctx, x: (100 + i * barWidth * 2), y: 500, width: barWidth, height: - array[i] * (400 / maxInArray), color: \"#2B5F75\" });\r\n        }\r\n    }\r\n}\r\n\r\nfunction drawSelectionBars(current, minIndex) {\r\n    drawBackground();\r\n    const ctx = document.getElementById(\"canvas\").getContext('2d');\r\n    barNums = array.length;\r\n    barWidth = (width - 200) / (2 * array.length - 1);\r\n    // 归一化？\r\n    let maxInArray = Number.MIN_VALUE;\r\n    array.forEach(element => {\r\n        maxInArray = Math.max(element, maxInArray);\r\n    });\r\n\r\n    for (let i = 0; i < barNums; i++) {\r\n        if (i === current) {\r\n            filledRect({ ctx: ctx, x: (100 + i * barWidth * 2), y: 500, width: barWidth, height: - array[i] * (400 / maxInArray), color: \"#FBE251\" });\r\n        }\r\n        else if (i === minIndex) {\r\n            filledRect({ ctx: ctx, x: (100 + i * barWidth * 2), y: 500, width: barWidth, height: - array[i] * (400 / maxInArray), color: \"#1B813E\" });\r\n        }\r\n        else {\r\n            filledRect({ ctx: ctx, x: (100 + i * barWidth * 2), y: 500, width: barWidth, height: - array[i] * (400 / maxInArray), color: \"#2B5F75\" });\r\n        }\r\n    }\r\n}\r\n\r\nfunction drawBackground() {\r\n    const ctx = document.getElementById(\"canvas\").getContext('2d');\r\n    ctx.clearRect(0, 0, 800, 600);\r\n\r\n    filledRect({ ctx: ctx, x: 0, y: 0, width: width, height: height, color: \"#DDDDDD\" });\r\n}\r\n\r\nfunction nextStep() {\r\n    let result = selectionSort.next();\r\n    array = result[0];\r\n    // let currentLeft = result[1];\r\n    drawSelectionBars(result[2], result[3]);\r\n    if (result[1]) {\r\n        clearInterval(timer);\r\n    }\r\n    console.log('1');\r\n}\r\n\r\nfunction selectSortAlgo(algoName) {\r\n    if (algoName === 'bubble') {\r\n        bubbleSort = new BubbleSort(array);\r\n        sortAlgo = bubbleSort;\r\n    }\r\n    else if (algoName === 'insertion') {\r\n        insertionSort = new InsertionSort(array);\r\n        sortAlgo = bubbleSort;\r\n    }\r\n    else if (algoName === 'selection') {\r\n        selectionSort = new selectionSort(array);\r\n        sortAlgo = bubbleSort;\r\n    }\r\n}\r\n\r\nlet width = 800;\r\nlet height = 600;\r\nlet prevX = 0;\r\nlet prevY = 0;\r\nvar canvasElementOffsetLeft;\r\nvar canvasElementOffsetTop;\r\n\r\nvar array = [10, 15, 9, 38, 9, 16, 4, 8, 7, 23, 6, 8, 37, 16, 12, 13, 8, 27, 49, 48, 13, 42, 17];\r\n\r\nvar bubbleSort;\r\nvar quickSort;\r\nvar insertionSort;\r\nvar selectionSort;\r\n\r\nvar sortAlgo;\r\n\r\nlet barNums;\r\nlet barWidth;\r\n\r\nvar intervalId, timeoutId;\r\nvar timer;\r\n\r\nclass Canvas extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        // let isMouseDown = false;\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateCanvas();\r\n\r\n        var canvasElement = document.getElementById(\"canvas\");\r\n        canvasElementOffsetLeft = canvasElement.offsetLeft;\r\n        canvasElementOffsetTop = canvasElement.offsetTop;\r\n\r\n        drawInsertionBars(0);\r\n\r\n    }\r\n    componentDidUpdate() {\r\n        this.updateCanvas();\r\n    }\r\n    updateCanvas() {\r\n        const ctx = this.refs.canvas.getContext('2d');\r\n        // ctx.translate(width / 2, height / 2);\r\n        ctx.clearRect(0, 0, 800, 600);\r\n\r\n        filledRect({ ctx: ctx, x: 0, y: 0, width: width, height: height, color: \"#DDDDDD\" });\r\n    }\r\n\r\n    drawBackground() {\r\n        const ctx = this.refs.canvas.getContext('2d');\r\n        // ctx.translate(width / 2, height / 2);\r\n        ctx.clearRect(0, 0, 800, 600);\r\n\r\n        filledRect({ ctx: ctx, x: 0, y: 0, width: width, height: height, color: \"#DDDDDD\" });\r\n    }\r\n\r\n    // drawCoordinateLine() {\r\n    //     const ctx = this.refs.canvas.getContext('2d');\r\n    //     ctx.strokeStyle = \"#FFFFFB\";\r\n\r\n    //     for (let i = 0; i < 3; i++) {\r\n    //         const coorLength = height / 20;\r\n    //         for (let t = 0; t < 20; t += 2) {\r\n    //             ctx.moveTo(0, height - coorLength * (t + 11.5));\r\n    //             ctx.lineTo(0, height - coorLength * (t + 10.5));\r\n    //         }\r\n\r\n    //         ctx.stroke();\r\n    //         ctx.rotate(Math.PI * 2 / symmetry);\r\n    //     }\r\n    // }\r\n\r\n    // handleMouseDown = (event) => {\r\n    //     console.log('mouse down');\r\n\r\n    //     this.isMouseDown = true;\r\n\r\n    //     // if window is resized\r\n    //     var canvasElement = document.getElementById(\"canvas\");\r\n    //     canvasElementOffsetLeft = canvasElement.offsetLeft;\r\n    //     canvasElementOffsetTop = canvasElement.offsetTop;\r\n\r\n    //     prevX = event.pageX - canvasElementOffsetLeft - width / 2;\r\n    //     prevY = event.pageY - canvasElementOffsetTop - height / 2;\r\n    // }\r\n\r\n    // handleMouseUp = (event) => {\r\n    //     console.log('mouse up');\r\n\r\n    //     this.isMouseDown = false;\r\n    // }\r\n\r\n    // handleMouseMove = (event) => {\r\n    //     // var x = event.clientX - width / 2;\r\n    //     // var y = event.clientY - height / 2;\r\n\r\n    //     var x = event.pageX - canvasElementOffsetLeft - width / 2;\r\n    //     var y = event.pageY - canvasElementOffsetTop - height / 2;\r\n\r\n\r\n\r\n    //     if (x > width / 2 - 10 || x < - width / 2 + 10 || y > height / 2 - 10 || y < - height / 2 + 10) {\r\n    //         this.isMouseDown = false;\r\n    //     }\r\n\r\n    //     const ctx = this.refs.canvas.getContext('2d');\r\n    //     if (this.isMouseDown) {\r\n\r\n    //         for (let i = 0; i < 6; i++) {\r\n\r\n    //             ctx.beginPath();\r\n    //             ctx.moveTo(prevX, prevY);\r\n    //             ctx.lineTo(x, y);\r\n    //             ctx.stroke();\r\n    //             ctx.closePath();\r\n    //             ctx.scale(-1, 1);\r\n    //             ctx.beginPath();\r\n    //             ctx.moveTo(prevX, prevY);\r\n    //             ctx.lineTo(x, y);\r\n    //             ctx.stroke();\r\n    //             ctx.closePath();\r\n    //             ctx.scale(-1, 1);\r\n\r\n    //             ctx.rotate(angle * Math.PI / 180);\r\n    //         }\r\n\r\n    //         prevX = x;\r\n    //         prevY = y;\r\n    //     }\r\n    // }\r\n\r\n    // drawBars() {\r\n    //     // this.updateCanvas();\r\n    //     const ctx = this.refs.canvas.getContext('2d');\r\n    //     //ctx.strokeStyle = \"#333333\";\r\n\r\n    //     for (let i = 0; i < barNums; i++) {\r\n    //         filledRect({ ctx: ctx, x: (100 + i * barWidth * 2), y: 400, width: barWidth, height: - Math.random()*300 , color: \"#2B5F75\" });\r\n    //     }\r\n    // }\r\n\r\n    randomArray() {\r\n        let randomArraySize = Math.random() * 15 + 15;  // 15 - 30\r\n        let newArray = [];\r\n        for (let index = 0; index < randomArraySize; index++) {\r\n            newArray.push(Math.random() * 48 + 2);\r\n        }\r\n        array = newArray;\r\n        const ctx = document.getElementById(\"canvas\").getContext('2d');\r\n\r\n        ctx.save();\r\n\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        drawBars();\r\n        clearInterval(timer);\r\n    }\r\n\r\n    clearCanvas() {\r\n        const ctx = document.getElementById(\"canvas\").getContext('2d');\r\n\r\n        ctx.save();\r\n\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        drawBars();\r\n    }\r\n\r\n    startSorting() {\r\n        clearInterval(timer);\r\n        timer = setInterval(nextStep, 50);\r\n\r\n        selectionSort = new SelectionSort(array.slice());\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const clearButtonStyle = {\r\n            // border: 0,\r\n            // borderRadius: '5px',\r\n            // backgroundColor: '#FFFFFF',\r\n            width: '270px',\r\n            height: '60px',\r\n            fontSize: '20px'\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <canvas id='canvas' ref=\"canvas\" width={width} height={height} />\r\n                <button onClick={this.startSorting} class=\"btn btn--stripe\" style={clearButtonStyle}>Start Sorting</button>\r\n                <button onClick={this.randomArray} class=\"btn btn--stripe\" style={clearButtonStyle}>Random Array</button>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Canvas;\r\nexport { selectSortAlgo };","import React from 'react';\r\nimport { tuple } from 'antd/lib/_util/type';\r\n\r\nfunction drawFilledRect(props) {\r\n    const { ctx, x, y, width, height, color } = props;\r\n    ctx.save();\r\n    ctx.beginPath();\r\n    ctx.fillStyle = color;\r\n    ctx.fillRect(x, y, width, height);\r\n    ctx.stroke();\r\n}\r\n\r\nfunction drawFilledCircle(props) {\r\n    const { ctx, x, y, radius, color } = props;\r\n    ctx.save();\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, radius, 0, 2 * Math.PI);\r\n    ctx.stroke();\r\n    ctx.fillStyle = color;  //绘制样式，图形颜色\r\n    ctx.fill();\r\n    ctx.strokeStyle = color;    //绘制边框样式\r\n    ctx.stroke();\r\n}\r\n\r\nfunction drawGraph(graph) {\r\n    const ctx = document.getElementById(\"canvas\").getContext('2d');\r\n\r\n    drawBackground();\r\n\r\n    let vertexNums = graph.length;\r\n\r\n    drawFilledCircle({ ctx: ctx, x: 400 + rds * Math.cos(Math.PI / 2), y: 300 - rds * Math.sin(Math.PI / 2), radius: 20, color: \"#2B5F75\" });\r\n\r\n    ctx.lineWidth = 3;  //设置线条宽度\r\n    console.log(cliqueNode)\r\n    // draw lines\r\n    for (let i = 0; i < vertexNums; i++) {\r\n        for (let j = 1; j < graph[i].length; j++) {\r\n\r\n            const temp_x1 = 400 + rds * Math.cos(Math.PI / 2 - (graph[i][0] - 1) * (Math.PI * 2) / vertexNums);\r\n            const temp_y1 = 300 - rds * Math.sin(Math.PI / 2 - (graph[i][0] - 1) * (Math.PI * 2) / vertexNums);\r\n            const temp_x2 = 400 + rds * Math.cos(Math.PI / 2 - (graph[i][j] - 1) * (Math.PI * 2) / vertexNums);\r\n            const temp_y2 = 300 - rds * Math.sin(Math.PI / 2 - (graph[i][j] - 1) * (Math.PI * 2) / vertexNums);\r\n\r\n            ctx.moveTo(temp_x1, temp_y1);\r\n            ctx.lineTo(temp_x2, temp_y2);\r\n\r\n            // if (cliqueNode.includes(graph[i][0] - 1) && cliqueNode.includes(graph[i][j] - 1)) {\r\n            //     ctx.lineWidth = 7;  //设置线条宽度\r\n            //     ctx.strokeStyle = 'green';\r\n            //     console.log((graph[i][0] - 1) + ' ' + (graph[i][j] - 1))\r\n            // }\r\n            // else {\r\n            //     ctx.strokeStyle = 'black';\r\n            // }\r\n\r\n            ctx.strokeStyle = 'black';   //绘制边框样式\r\n            ctx.stroke();\r\n\r\n            ctx.lineWidth = 3;  //设置线条宽度\r\n        }\r\n    }\r\n\r\n    // draw inner cycles\r\n    for (let i = 0; i < vertexNums; i++) {\r\n        const temp_x = 400 + rds * Math.cos(Math.PI / 2 - i * (Math.PI * 2) / vertexNums);\r\n        const temp_y = 300 - rds * Math.sin(Math.PI / 2 - i * (Math.PI * 2) / vertexNums);\r\n        if (cliqueNode.includes(i)) {\r\n            drawFilledCircle({ ctx: ctx, x: temp_x, y: temp_y, radius: 20, color: \"#7BA23F\" });\r\n        }\r\n        else {\r\n            drawFilledCircle({ ctx: ctx, x: temp_x, y: temp_y, radius: 20, color: \"#2B5F75\" });\r\n        }\r\n\r\n        ctx.font = \"20px Georgia\";\r\n        ctx.fillStyle = \"#FFFFFF\";\r\n        ctx.fillText(i + 1, temp_x - 5, temp_y + 4);\r\n    }\r\n\r\n    // setCMDTextArea();\r\n\r\n    // reset \r\n    cliqueNode = [];\r\n\r\n}\r\n\r\nfunction setCMDTextArea() {\r\n    let text = '[';\r\n    for (let i = 0; i < graph.length; i++) {\r\n        text += '[';\r\n        for (let j = 0; j < graph[i].length - 1; j++) {\r\n            text += graph[i][j] + ' ';\r\n        }\r\n        text += graph[i][graph[i].length - 1] + ']';\r\n    }\r\n    text += ']';\r\n    document.getElementById(\"cmdTextArea\").value = text;\r\n\r\n\r\n}\r\n\r\nfunction getCMDTextArea() {\r\n    let text = document.getElementById(\"cmdTextArea\").value;\r\n    text = text.substring(1, text.length - 1);\r\n    let textArray = text.split(']');\r\n    let temp_graph = [];\r\n\r\n    for (let i = 0; i < textArray.length - 1; i++) {\r\n        let temp_subtext = textArray[i].substring(1);\r\n        // temp_graph.push([...temp_subtext.split(' ')]);\r\n        const temp_arr = temp_subtext.split(' ');\r\n        let temp_subarr = [];\r\n        for (let index = 0; index < temp_arr.length; index++) {\r\n            temp_subarr.push(parseInt(temp_subtext.split(' ')[index]));\r\n        }\r\n        temp_graph.push(temp_subarr);\r\n    }\r\n    // console.log(temp_graph);\r\n    graph = temp_graph;\r\n    graph = graph.sort((a, b) => { return a[0] - b[0] });\r\n\r\n    drawGraph(graph);\r\n}\r\n\r\nfunction checktCMDTextArea() {\r\n    for (let i = 0; i < graph.length; i++) {\r\n        for (let j = 1; j < graph[i].length; j++) {\r\n            for (let m = 0; m < graph.length; m++) {\r\n                if (graph[m][0] === graph[i][j]) {\r\n                    let hasNode = false;\r\n                    for (let n = 0; n < graph[m].length; n++) {\r\n                        if (graph[m][n] === graph[i][0]) {\r\n                            hasNode = true;\r\n                        }\r\n                    }\r\n                    if (!hasNode) {\r\n                        graph[m].push(graph[i][0]);\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    setCMDTextArea();\r\n\r\n    // findMaximumClique(graph);\r\n    // console.log(graph);\r\n}\r\n\r\nfunction drawBackground() {\r\n    const ctx = document.getElementById(\"canvas\").getContext('2d');\r\n    ctx.clearRect(0, 0, 800, 600);\r\n    // ctx.height = ctx.height;\r\n\r\n    // filledRect({ ctx: ctx, x: 0, y: 0, width: width, height: height, color: \"#DDDDDD\" });\r\n}\r\n\r\nlet canvasWidth = 800;\r\nlet canvasHeight = 600;\r\n\r\nlet prevX = 0;\r\nlet prevY = 0;\r\n\r\n// let saveButton;\r\n// let clearButton;\r\n// let slider;\r\n// let xoff = 0;\r\n\r\nvar canvasElementOffsetLeft;\r\nvar canvasElementOffsetTop;\r\n\r\nvar graph = [[1, 5, 2, 7, 8], [2, 4, 1, 3, 5, 6], [3, 2, 4, 5], [4, 2, 3, 5], [5, 2, 4, 1, 3], [6, 2], [7, 1], [8, 1]];\r\n\r\nconst rds = 200;\r\n\r\n// const NODENUM = '4';\r\n// const TESTINPUT = '0 1\\n' + '';\r\nvar cliqueNode = [];\r\n\r\nlet startNodeIndex = 0;\r\nlet endNodeIndex = 0;\r\n\r\nfunction findMaximumClique() {\r\n    console.log(graph);\r\n\r\n    let openList = [];\r\n    openList.push(\"0\");\r\n    openList.push(\"1\");\r\n\r\n    let bound = 0;\r\n    //\r\n    let f;\r\n\r\n    let result = [];\r\n\r\n    let calculationTimes = 0;\r\n\r\n    console.log(typeof graph[0][0]);\r\n\r\n    while (openList.length > 0) {\r\n\r\n        // current = already informed length\r\n        let current = openList.pop();\r\n\r\n        // calculate f\r\n        f = (current.match(/1/g) || []).length + graph.length - current.length;\r\n        if (f <= bound) {\r\n            continue;\r\n        }\r\n\r\n        console.log(current);\r\n\r\n        if (current.length !== graph.length) {\r\n            let canIncludeCurrentNode = true;\r\n            for (let index = 0; index < current.length; index++) {\r\n                if (current.substring(index, index + 1) === '1') {\r\n                    console.log(graph[index].includes(1 + current.length))\r\n                    if (!graph[index].includes(1 + current.length)) {\r\n                        canIncludeCurrentNode = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (canIncludeCurrentNode) {\r\n                openList.push(current + \"0\");\r\n                openList.push(current + \"1\");\r\n            }\r\n            else {\r\n                openList.push(current + \"0\");\r\n            }\r\n        }\r\n        else {\r\n            // calculate bound and update\r\n            bound = Math.max((current.match(/1/g) || []).length, bound);\r\n            console.log(bound);\r\n\r\n            result.push(current);\r\n\r\n            calculationTimes++;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    // output result\r\n    let temp = [];\r\n    let nodeResult = '';\r\n    for (let index = 0; index < result.length; index++) {\r\n        if ((result[index].match(/1/g) || []).length === bound) {\r\n            temp.push(result[index]);\r\n        }\r\n    }\r\n\r\n\r\n    result = temp;\r\n\r\n\r\n    for (let index = 0; index < result[0].length; index++) {\r\n        if (result[0].substring(index, index + 1) === '1') {\r\n            cliqueNode.push(index);\r\n        }\r\n    }\r\n    for (let index = 0; index < cliqueNode.length; index++) {\r\n        nodeResult += (cliqueNode[index] + 1) + ' ';\r\n    }\r\n\r\n    document.getElementById(\"outputTextArea\").value = ('result: ' + result + '\\nvertices in clique: ' + nodeResult);\r\n\r\n    console.log('calculation times: ' + calculationTimes);\r\n\r\n    drawGraph(graph);\r\n}\r\n\r\nfunction updateNode() {\r\n    getCMDTextArea();\r\n    checktCMDTextArea();\r\n    document.getElementById(\"outputTextArea\").value = '';\r\n}\r\n\r\nfunction findMaxClique() {\r\n    findMaximumClique();\r\n}\r\n\r\nfunction getNodeIndex(prevX, prevY) {\r\n    // console.log(prevX + ' ' + prevY);\r\n    let result = 0;\r\n    for (let i = 0; i < graph.length; i++) {\r\n        const temp_x = 400 + rds * Math.cos(Math.PI / 2 - i * (Math.PI * 2) / graph.length);\r\n        const temp_y = 300 - rds * Math.sin(Math.PI / 2 - i * (Math.PI * 2) / graph.length);\r\n        if ((temp_x - prevX) * (temp_x - prevX) + (temp_y - prevY) * (temp_y - prevY) < 400) {\r\n            // console.log('node:' + (i + 1));\r\n            result = i + 1;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction addOrRemoveEdge(startNodeIndex, endNodeIndex) {\r\n    let isAdd = true;\r\n\r\n    for (let i = 0; i < graph.length; i++) {\r\n        if (graph[i][0] === startNodeIndex) {\r\n            // check if need to remove\r\n            if (graph[i].includes(endNodeIndex)) {\r\n                isAdd = false;\r\n                break;\r\n            }\r\n        }\r\n        if (graph[i][0] === endNodeIndex) {\r\n            // check if need to remove\r\n            if (graph[i].includes(startNodeIndex)) {\r\n                isAdd = false;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // add or remove\r\n    if (isAdd) {\r\n        for (let i = 0; i < graph.length; i++) {\r\n            if (graph[i][0] === startNodeIndex) {\r\n                // add\r\n                if (!graph[i].includes(endNodeIndex)) {\r\n                    graph[i].push(endNodeIndex);\r\n                }\r\n            }\r\n    \r\n            if (graph[i][0] === endNodeIndex) {\r\n                // add\r\n                if (!graph[i].includes(startNodeIndex)) {\r\n                    graph[i].push(startNodeIndex);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        for (let i = 0; i < graph.length; i++) {\r\n            if (graph[i][0] === startNodeIndex) {\r\n                // remove\r\n                if (graph[i].includes(endNodeIndex)) {\r\n                    console.log('removing ' + endNodeIndex + ' from ' + startNodeIndex);\r\n                    graph[i].splice(graph[i].indexOf(endNodeIndex), 1);\r\n                }\r\n            }\r\n    \r\n            if (graph[i][0] === endNodeIndex) {\r\n                // remove\r\n                if (graph[i].includes(startNodeIndex)) {\r\n                    console.log('removing ' + startNodeIndex + ' from ' + endNodeIndex);\r\n                    graph[i].splice(graph[i].indexOf(startNodeIndex), 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n\r\n\r\n    // for (let i = 0; i < graph.length; i++) {\r\n    //     if (graph[i][0] === startNodeIndex) {\r\n    //         // add\r\n    //         if (!graph[i].includes(endNodeIndex)) {\r\n    //             graph[i].push(endNodeIndex);\r\n    //         }\r\n    //         // remove\r\n    //         else {\r\n    //             console.log('removing ' + endNodeIndex + ' from ' + startNodeIndex);\r\n    //             graph[i].splice(graph[i].indexOf(endNodeIndex), 1);\r\n    //             for (let j = 0; j < graph.length; j++) {\r\n    //                 if (graph[j][0] === endNodeIndex && graph[j].includes(startNodeIndex)) {\r\n    //                     graph[j].splice(graph[j].indexOf(startNodeIndex), 1);\r\n\r\n    //                     break;\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n\r\n    //     if (graph[i][0] === endNodeIndex) {\r\n    //         // add\r\n    //         if (!graph[i].includes(startNodeIndex)) {\r\n    //             graph[i].push(startNodeIndex);\r\n    //         }\r\n    //         // remove\r\n    //         else {\r\n    //             console.log('removing ' + startNodeIndex + ' from ' + endNodeIndex);\r\n    //             graph[i].splice(graph[i].indexOf(startNodeIndex), 1);\r\n    //             console.log(graph[i])\r\n    //             for (let j = 0; j < graph.length; j++) {\r\n    //                 if (graph[j][0] === startNodeIndex && graph[j].includes(endNodeIndex)) {\r\n    //                     graph[j].splice(graph[j].indexOf(endNodeIndex), 1);\r\n    //                     break;\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    setCMDTextArea();\r\n    updateNode();\r\n}\r\n\r\nclass CanvasGraph extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        let isMouseDown = false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateCanvas();\r\n\r\n        drawGraph(graph);\r\n        setCMDTextArea();\r\n    }\r\n    componentDidUpdate() {\r\n        this.updateCanvas();\r\n    }\r\n    updateCanvas() {\r\n        const ctx = this.refs.canvas.getContext('2d');\r\n        ctx.clearRect(0, 0, 800, 600);\r\n\r\n        // filledRect({ ctx: ctx, x: 0, y: 0, width: width, height: height, color: \"#DDDDDD\" });\r\n    }\r\n\r\n    addNode() {\r\n        graph.push([graph.length + 1, 1]);\r\n        for (let index = 0; index < graph.length; index++) {\r\n            if (graph[index][0] === 1)\r\n                graph[index].push(graph.length);\r\n        }\r\n\r\n        drawGraph(graph);\r\n\r\n    }\r\n\r\n    updateNode() {\r\n        getCMDTextArea();\r\n        checktCMDTextArea();\r\n        document.getElementById(\"outputTextArea\").value = '';\r\n    }\r\n\r\n    findMaxClique() {\r\n        findMaximumClique();\r\n    }\r\n\r\n    handleMouseDown = (event) => {\r\n        console.log('mouse down');\r\n\r\n        this.isMouseDown = true;\r\n\r\n        // if window is resized\r\n        var canvasElement = document.getElementById(\"canvas\");\r\n        canvasElementOffsetLeft = canvasElement.offsetLeft;\r\n        canvasElementOffsetTop = canvasElement.offsetTop;\r\n\r\n        // prevX = event.pageX - canvasElementOffsetLeft - canvasWidth / 2;\r\n        // prevY = event.pageY - canvasElementOffsetTop - canvasHeight / 2;\r\n        prevX = event.pageX - canvasElementOffsetLeft;\r\n        prevY = event.pageY - canvasElementOffsetTop;\r\n\r\n        startNodeIndex = getNodeIndex(prevX, prevY);\r\n        console.log('start at node-' + startNodeIndex);\r\n    }\r\n\r\n    handleMouseUp = (event) => {\r\n        console.log('mouse up');\r\n\r\n        this.isMouseDown = false;\r\n\r\n        endNodeIndex = getNodeIndex(prevX, prevY);\r\n        console.log('end at node-' + endNodeIndex);\r\n\r\n        if (startNodeIndex > 0 && startNodeIndex < graph.length + 1 && endNodeIndex > 0 && endNodeIndex < graph.length + 1) {\r\n            console.log('add link ' + startNodeIndex + ' ' + endNodeIndex);\r\n            addOrRemoveEdge(startNodeIndex, endNodeIndex);\r\n        }\r\n\r\n        startNodeIndex = 0;\r\n        endNodeIndex = 0;\r\n    }\r\n\r\n    handleMouseMove = (event) => {\r\n        var x = event.pageX - canvasElementOffsetLeft;\r\n        var y = event.pageY - canvasElementOffsetTop;\r\n\r\n        if (x > canvasWidth - 10 || x < 10 || y > canvasHeight - 10 || y < 10) {\r\n            this.isMouseDown = false;\r\n        }\r\n\r\n        const ctx = this.refs.canvas.getContext('2d');\r\n        if (this.isMouseDown) {\r\n\r\n            prevX = x;\r\n            prevY = y;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const clearButtonStyle = {\r\n            // border: 0,\r\n            // borderRadius: '5px',\r\n            // backgroundColor: '#FFFFFF',\r\n            width: '200px',\r\n            height: '50px',\r\n            fontSize: '20px'\r\n        };\r\n\r\n        const textAreaStyle_1 = {\r\n            // border: 0,\r\n            // borderRadius: '5px',\r\n            // backgroundColor: '#FFFFFF',\r\n            width: '400px',\r\n            height: '120px',\r\n            fontSize: '20px'\r\n        };\r\n\r\n        const textAreaStyle_2 = {\r\n            // border: 0,\r\n            // borderRadius: '5px',\r\n            // backgroundColor: '#FFFFFF',\r\n            width: '400px',\r\n            height: '70px',\r\n            fontSize: '20px'\r\n        };\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <canvas id='canvas' ref=\"canvas\" width={canvasWidth} height={canvasHeight} onMouseUp={this.handleMouseUp} onMouseDown={this.handleMouseDown} onMouseMove={this.handleMouseMove} />\r\n                <textarea id='cmdTextArea' style={textAreaStyle_1}></textarea>\r\n                <textarea id='outputTextArea' style={textAreaStyle_2}></textarea>\r\n                {/* <button onClick={this.addNode} className=\"btn btn--stripe\" style={clearButtonStyle}>Add New Node</button> */}\r\n                {/* <button onClick={updateNode} className=\"btn btn--stripe\" style={clearButtonStyle}>Update Node</button>\r\n                <button onClick={this.findMaxClique} className=\"btn btn--stripe\" style={clearButtonStyle}>Find Max Clique</button> */}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CanvasGraph;\r\nexport { updateNode, findMaxClique };\r\n","import React from 'react';\r\n// import { Layout, Menu, Breadcrumb, Icon } from 'antd';\r\nimport { Layout, Menu, Breadcrumb} from 'antd';\r\nimport './Visualgo.css';\r\nimport logo from '../logo.svg';\r\nimport Canvas from '../Canvas/Canvas';\r\nimport CanvasGraph from '../Canvas/CanvasGraph';\r\nimport {selectSortAlgo} from '../Canvas/Canvas';\r\n\r\nimport {updateNode, findMaxClique} from '../Canvas/CanvasGraph';\r\n\r\nimport ButtonGroup from 'antd/lib/button/button-group';\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nclass Visualgo extends React.Component {\r\n\r\n    state = {\r\n        collapsed: false,\r\n    };\r\n\r\n    onCollapse = collapsed => {\r\n        console.log(collapsed);\r\n        this.setState({ collapsed });\r\n    };\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Layout style={{ minHeight: '100vh' }}>\r\n                <Sider collapsible collapsed={this.state.collapsed} onCollapse={this.onCollapse}>\r\n                    <div >\r\n                        <img style={{ width: '85px' }} src={logo} alt=\"logo\" />\r\n                    </div>\r\n                    <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n                        <Menu.Item key=\"1\">\r\n                            {/* <Icon type=\"pie-chart\" /> */}\r\n                            <span>Option 1</span>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"2\">\r\n                            {/* <Icon type=\"desktop\" /> */}\r\n                            <span>Option 2</span>\r\n                        </Menu.Item>\r\n                        <SubMenu\r\n                            key=\"sub1\"\r\n                            title={\r\n                                <span>\r\n                                    {/* <Icon type=\"user\" /> */}\r\n                                    <span>Node</span>\r\n                                </span>\r\n                            }\r\n                        >\r\n                            <Menu.Item key=\"3\">Add Node</Menu.Item>\r\n                            <Menu.Item key=\"4\">Remove Node</Menu.Item>\r\n                            <Menu.Item key=\"5\">Show Neighbours</Menu.Item>\r\n                        </SubMenu>\r\n                        <SubMenu\r\n                            key=\"sub2\"\r\n                            title={\r\n                                <span>\r\n                                    {/* <Icon type=\"team\" /> */}\r\n                                    <span>Graph</span>\r\n                                </span>\r\n                            }\r\n                        >\r\n                            <Menu.Item key=\"6\">Graph Example 1</Menu.Item>\r\n                            <Menu.Item key=\"7\">Graph Example 2</Menu.Item>\r\n                            <Menu.Item key=\"8\">Graph Example 3</Menu.Item>\r\n                            <Menu.Item key=\"9\">Graph Example 4</Menu.Item>\r\n                        </SubMenu>\r\n                        <Menu.Item key=\"10\" onClick={findMaxClique}>\r\n                            {/* <Icon type=\"file\" /> */}\r\n                            <span>Find Max Clique</span>\r\n                        </Menu.Item>\r\n                        <Menu.Item key=\"11\" onClick={updateNode}>\r\n                            {/* <Icon type=\"file\" /> */}\r\n                            <span>Update Node</span>\r\n                            {/* <button >--Bubble--</button> */}\r\n                        </Menu.Item>\r\n                    </Menu>\r\n                </Sider>\r\n                <Layout>\r\n                    <Header className=\"header\">\r\n                        <div className=\"logo\" />\r\n                        <Menu\r\n                            theme=\"dark\"\r\n                            mode=\"horizontal\"\r\n                            defaultSelectedKeys={['2']}\r\n                            style={{ lineHeight: '64px' }}\r\n                        >\r\n                            <Menu.Item key=\"1\">nav 1</Menu.Item>\r\n                            <Menu.Item key=\"2\">nav 2</Menu.Item>\r\n                            <Menu.Item key=\"3\">nav 3</Menu.Item>\r\n                        </Menu>\r\n                    </Header>\r\n                    <Content style={{ margin: '0 16px' }}>\r\n                        <Breadcrumb style={{ margin: '16px 0' }}>\r\n                            <Breadcrumb.Item>Graph Theory - Maximum Clique</Breadcrumb.Item>\r\n                            {/* <Breadcrumb.Item>Bubble Sort</Breadcrumb.Item> */}\r\n                        </Breadcrumb>\r\n                        {/* <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>Bill is a cat.</div> */}\r\n                        <CanvasGraph />\r\n                    </Content>\r\n                    <Footer style={{ textAlign: 'center' }}>Elonn Software ©2020 Created by Yilun Sun</Footer>\r\n                </Layout>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Visualgo;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n// import { Button } from 'antd';\n// import { Layout, Menu, Breadcrumb, Icon } from 'antd';\nimport Visualgo from './Visualgo/Visualgo';\n\n// const { SubMenu } = Menu;\n// const { Header, Content, Sider } = Layout;\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <Visualgo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}